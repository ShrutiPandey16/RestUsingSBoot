*   Stateless -> communication method in which the server completes every client request independently of all previous requests.

*   REST -> Representation State Transfer
        R -> In a proper format(e.g. json, xml etc) Representation of a resource not the resource itself.
        S -> Current condition or data of the resource at an instance. REST is stateless.
        T -> The state is transferred from the server to the client via HTTP methods (GET, POST, etc.).

*   REST uses Noun rather than Verb. Eg. .../addAJob -> .../job

*   1. start the server, we can create pseudo server by installing json-server    
        npm i json-server
    2. run server
        json-server --watch db.json --port 8080  
    3. install all the packages
        npm i
    4. start react
        npm start

*   By default, @Controller annotation is used to return views(like jsp pages).
    To return raw data(json, xml etc.), there are 2 options:
        1. use @ResponseBody + @Controller annotation
            
            @Controller
            public class MyController {

                @GetMapping("/data")
                @ResponseBody
                public String getData() {
                    return "Hello, this is raw data";
                }
            }

        2. use @RestController annotation with the class
            @RestController
            public class MyRestController {

                @GetMapping("/data")
                public String getData() {
                    return "Hello, this is raw data";
                }
            }

            @RestController = @Controller + @ResponseBody
    Use @RestController when creating REST APIs, and @Controller when returning views like JSPs or Thymeleaf templates.

*   Since React (running on port 3000) and Spring Boot (on port 8080) are different origins, the browser blocks their communication due to Cross-Origin Resource Sharing (CORS) policy.
    To enable communication, follow these two steps:
    1. Frontend (React) – Call the Backend API
       In components.jsx (or similar React file), use axios or fetch to call your backend:
        const response = await axios.get("http://localhost:8080/jobPosts");
    2. Backend (Spring Boot) – Enable CORS
       In your @RestController class, allow requests from the React app using @CrossOrigin:    
        @RestController
        @CrossOrigin(origins = "http://localhost:3000")
        public class JobRestController {
            // Your endpoint methods
        }
        ✅ This tells Spring Boot to allow requests from your React app’s origin.

*   To fetch specific data (e.g., a job post with postId = 2), use path variables in the URL and the @PathVariable annotation in your Spring Boot controller.   
    Eg. : 
        @GetMapping("jobPosts/{postId}")
        public JobPost getJob(@PathVariable("postId") int postId) {
            return service.getJob(postId);
        }

*   To send data (like a new JobPost) from the frontend (React) to the backend (Spring Boot), use @PostMapping with @RequestBody.   
        Eg:
        @PostMapping("jobPost")
        public void postJob(@RequestBody JobPost jobPost) {
            service.addJob(jobPost);
        }

*   To update/delete data, @PutMapping and @DeleteMapping annotations are used respectively. 
    So while I was deleting the data from the Arraylist in the repo class, I had used foreach loop. So the data got deleted yet I was getting error
    because deleting the data inside the foreach loop is not allowed in Java. Therefore, I used the "removeIf" method of ArrayList. 
    Eg.:
    public void deleteJob(int postId) {
    jobs.removeIf(job -> job.getPostId() == postId); // ✅ Safe and clean
    }

*   Content Negotiation can be achieved by adding jackson xml dependency on pom.xml and using it. Further, to restrict the body type to only json, producer and consumer 
    specification can be used.    
 
           






        
